// Mocks generated by Mockito 5.4.5 from annotations
// in kagi_news_app/test/features/news_list/view_models/news_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:kagi_news_app/features/bookmarks/data/repositories/bookmarks_repository.dart'
    as _i6;
import 'package:kagi_news_app/features/news_list/data/models/news/news.dart'
    as _i7;
import 'package:kagi_news_app/features/news_list/data/models/news/news_response.dart'
    as _i5;
import 'package:kagi_news_app/features/news_list/data/models/news_topic/news_topic_response.dart'
    as _i4;
import 'package:kagi_news_app/features/news_list/data/repositories/news_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRepository extends _i1.Mock implements _i2.NewsRepository {
  MockNewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.NewsTopicResponse?> fetchNewsTopic() => (super.noSuchMethod(
        Invocation.method(
          #fetchNewsTopic,
          [],
        ),
        returnValue: _i3.Future<_i4.NewsTopicResponse?>.value(),
      ) as _i3.Future<_i4.NewsTopicResponse?>);

  @override
  _i3.Future<_i5.NewsResponse?> fetchNews(String? file) => (super.noSuchMethod(
        Invocation.method(
          #fetchNews,
          [file],
        ),
        returnValue: _i3.Future<_i5.NewsResponse?>.value(),
      ) as _i3.Future<_i5.NewsResponse?>);
}

/// A class which mocks [BookmarksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookmarksRepository extends _i1.Mock
    implements _i6.BookmarksRepository {
  MockBookmarksRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> deleteAllBookmarkedNews() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllBookmarkedNews,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeBookmark(_i7.News? news) => (super.noSuchMethod(
        Invocation.method(
          #removeBookmark,
          [news],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> saveBookmark(_i7.News? news) => (super.noSuchMethod(
        Invocation.method(
          #saveBookmark,
          [news],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  bool isBookmarked(_i7.News? news) => (super.noSuchMethod(
        Invocation.method(
          #isBookmarked,
          [news],
        ),
        returnValue: false,
      ) as bool);
}
