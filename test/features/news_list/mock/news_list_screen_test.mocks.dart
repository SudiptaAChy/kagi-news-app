// Mocks generated by Mockito 5.4.5 from annotations
// in kagi_news_app/test/features/news_list/views/news_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i5;

import 'package:kagi_news_app/features/news_list/data/models/news/news.dart'
    as _i4;
import 'package:kagi_news_app/features/news_list/view_models/news_view_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NewsViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsViewModel extends _i1.Mock implements _i2.NewsViewModel {
  MockNewsViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isTopicsLoading => (super.noSuchMethod(
        Invocation.getter(#isTopicsLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isNewsLoading => (super.noSuchMethod(
        Invocation.getter(#isNewsLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> getNewsTopics() => (super.noSuchMethod(
        Invocation.method(
          #getNewsTopics,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> getNews(String? file) => (super.noSuchMethod(
        Invocation.method(
          #getNews,
          [file],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> addToBookmark(_i4.News? news) => (super.noSuchMethod(
        Invocation.method(
          #addToBookmark,
          [news],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeFromBookmark(_i4.News? news) => (super.noSuchMethod(
        Invocation.method(
          #removeFromBookmark,
          [news],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  bool isBookmarked(_i4.News? news) => (super.noSuchMethod(
        Invocation.method(
          #isBookmarked,
          [news],
        ),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
